@namespace FamilyTask.Components
@using Domain.Commands;
@using WebClient.Pages;
@inject WebClient.Abstractions.ITaskDataService TaskDataService
<style>
    .task-wrapper .task-item {
        background: #FFFFFF;
        border: 1px solid #C5C9C9;
        box-sizing: border-box;
        border-radius: 8px;
        font-size: 24px;
        font-family: "Poppins Light";
    }

    .done-text {
        text-decoration: line-through;
    }

    .task-wrapper .avtar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    @@media(max-width: 1400px) {
        .task-wrapper .task-item {
            font-size: 16px;
        }

        .task-wrapper .avtar {
            width: 24px;
            height: 24px;
        }

        .delete-icon {
            width: 25px;
        }
    }

    @@media(max-width: 767.98px) {
        .task-wrapper .avtar {
            width: 16px;
            height: 16px;
        }
    }
</style>
<div class="task-wrapper">
    @foreach (var item in Tasks)
    {
        <Draggable Data="@item">
            <div class="task-item p-3 my-3 row m-0">
                <div class="col-10 p-0">
                    <Check TValue="bool" Checked="@item.IsComplete" CheckedChanged="@(val => onTaskSelection(item, val))">
                        <span class="@(item.IsComplete ? "done-text" : "")">@item.Subject</span>
                    </Check>
                </div>
                <div class="col-2 p-0 d-flex justify-content-end align-items-center">
                    @if (item.Member != null)
                    {
                        <div class="avtar mr-1" style="background-color: @item.Member.Avatar;"></div>
                    }
                    <img class="delete-icon" src="/assets/images/delete-icon.svg" />
                </div>
            </div>
        </Draggable>
    }
</div>
@code  {
    [Parameter] public TaskModel[] Tasks { get; set; }
    private async void onTaskSelection(TaskModel item, bool isSelected)
    {
        item.IsComplete = isSelected;
        UpdateTaskCommand command = new UpdateTaskCommand
        {
            Id = item.Id,
            Subject = item.Subject,
            IsComplete = item.IsComplete,
            AssignedToId = (item.Member.Id != Guid.Empty) ? item.Member.Id.ToString() : null,
            LastChangedOn = DateTime.Now
        };
        var result = await TaskDataService.Update(command);
        if (!result.Succeed)
        {
            item.IsComplete = !item.IsComplete;
        }
        StateHasChanged();
    }
}